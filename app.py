import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from weather_service import get_weather_forecast, get_coordinates, format_city_name, generate_graphhopper_route_url
import plotly.graph_objs as go
import plotly.io as pio
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class WeatherForm(StatesGroup):
    start_point = State()
    end_point = State()
    intermediate_points = State()
    days = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É. "
                         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /weather, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π, –∫–æ–Ω–µ—á–Ω–æ–π –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """
    –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n"
                         "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                         "/weather - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞")

# –ö–æ–º–∞–Ω–¥–∞ /weather
@dp.message_handler(commands=['weather'])
async def cmd_weather(message: types.Message):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")
    await WeatherForm.start_point.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
@dp.message_handler(state=WeatherForm.start_point)
async def process_start_point(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    start_point = format_city_name(message.text)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥
    await state.update_data(start_point=start_point)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")
    await WeatherForm.next()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
@dp.message_handler(state=WeatherForm.end_point)
async def process_end_point(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    end_point = format_city_name(message.text)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥
    await state.update_data(end_point=end_point)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):")
    await WeatherForm.next()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
@dp.message_handler(state=WeatherForm.intermediate_points)
async def process_intermediate_points(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    intermediate_points = message.text.strip().lower()
    if intermediate_points.lower() == "–Ω–µ—Ç":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "–Ω–µ—Ç"
        intermediate_points = []
    else:
        intermediate_points = [format_city_name(point.strip()) for point in intermediate_points.split(',') if point.strip()]
    await state.update_data(intermediate_points=intermediate_points)
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="1"),
                 InlineKeyboardButton("3 –¥–Ω—è", callback_data="3"),
                 InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="5"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await WeatherForm.next()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@dp.callback_query_handler(lambda c: c.data.isdigit(), state=WeatherForm.days)
async def process_days(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
    """
    await state.update_data(days=int(callback_query.data))
    data = await state.get_data()
    start_point = data['start_point']
    end_point = data['end_point']
    intermediate_points = data['intermediate_points']
    days = data['days']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
    locations = [start_point, *intermediate_points, end_point]

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    try:
        forecast = get_weather_forecast(locations, days)
        response = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:\n"
        for location, data in forecast.items():
            response += f"üåç {location}:\n"
            for day, info in data.items():
                response += f"üìÖ {day}:\n"
                response += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {info['temperature_min']}¬∞C - {info['temperature_max']}¬∞C\n"
                response += f"üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {info['precipitation_probability']}%\n"
                response += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {info['wind_speed']} –º/—Å\n"

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
            # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            fig_temp = go.Figure()
            fig_temp.add_trace(go.Scatter(
                x=[day for day in data.keys()],
                y=[info['temperature_max'] for info in data.values()],
                mode='lines+markers',
                name='–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
            ))
            fig_temp.add_trace(go.Scatter(
                x=[day for day in data.keys()],
                y=[info['temperature_min'] for info in data.values()],
                mode='lines+markers',
                name='–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
            ))
            fig_temp.update_layout(
                title=f"{location} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                xaxis_title="–î–Ω–∏",
                yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                legend=dict(x=0.1, y=1.1),
                template="plotly_white"
            )

            # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤
            fig_precip = go.Figure()
            fig_precip.add_trace(go.Bar(
                x=[day for day in data.keys()],
                y=[info['precipitation_probability'] for info in data.values()],
                name='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤',
                marker_color='blue'
            ))
            fig_precip.update_layout(
                title=f"{location} - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤",
                xaxis_title="–î–Ω–∏",
                yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ (%)",
                template="plotly_white"
            )

            # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
            fig_wind = go.Figure()
            fig_wind.add_trace(go.Scatter(
                x=[day for day in data.keys()],
                y=[info['wind_speed'] for info in data.values()],
                mode='lines+markers',
                name='–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞',
                line=dict(color='green')
            ))
            fig_wind.update_layout(
                title=f"{location} - –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
                xaxis_title="–î–Ω–∏",
                yaxis_title="–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
                template="plotly_white"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ñ–∞–π–ª—ã
            temp_path = f"{location}_temperature.png"
            precip_path = f"{location}_precipitation.png"
            wind_path = f"{location}_wind.png"
            pio.write_image(fig_temp, temp_path)
            pio.write_image(fig_precip, precip_path)
            pio.write_image(fig_wind, wind_path)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(temp_path, 'rb') as photo:
                await bot.send_photo(callback_query.message.chat.id, photo)
            with open(precip_path, 'rb') as photo:
                await bot.send_photo(callback_query.message.chat.id, photo)
            with open(wind_path, 'rb') as photo:
                await bot.send_photo(callback_query.message.chat.id, photo)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(temp_path)
            os.remove(precip_path)
            os.remove(wind_path)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–º–æ—â—å—é GraphHopper
        try:
            coordinates = [get_coordinates(location) for location in locations]
            if all(coordinates):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
                route_url = generate_graphhopper_route_url(coordinates)
                await bot.send_message(callback_query.message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: {route_url}")
            else:
                await bot.send_message(callback_query.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.")
        except Exception as e:
            await bot.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: {e}")

        await bot.send_message(callback_query.message.chat.id, response)
    except Exception as e:
        await bot.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    await state.finish()

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)